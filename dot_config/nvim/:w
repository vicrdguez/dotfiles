local M = {}

function M.zk(command, opts)
    return function()
        local zk_cmd = require("zk.commands").get(command)
        if zk_cmd then
            zk_cmd(opts)
        else
            M[command](opts)
        end
    end
end

local function def_pick_cb(picker_opts)
    return function(notes)
        if picker_opts and picker_opts.multi_select == false then
            notes = { notes }
        end
        for _, note in ipairs(notes) do
            vim.cmd("e " .. note.absPath)
        end
    end
end

-- by default we just have the option to create the note in main
local function def_create_cb(opts, new_win, open_file)
    return function(_, fzf_opts)
        -- P(fzf_opts.__call_opts.query)
        local prompt_input = fzf_opts.__call_opts.query
        local dir = opts.dir or "main"
        if new_win then
            vim.cmd("vsplit")
        end
        local link_location
        require("zk.util").get_lsp_location_from_caret()
        -- P(link_location, "link")
        require("zk.commands").get("ZkNew")({
            title = prompt_input,
            dir = dir,
            insertLinkAtLocation = link_location,
            edit = open_file or true
        })
    end
end

function M.find_or_create(opts, picker_opts, create_cb, pick_cb)
    -- same exact callback as zk-nvim/lua/zk.lua

    picker_opts = vim.tbl_extend("force", {
        title = "Zk find",
        fzf_lua = {
            actions = {
                ["ctrl-o"] = create_cb or def_create_cb(opts),
                ["ctrl-p"] = def_create_cb(opts, true),
            }
        }
    }, picker_opts or {})
    local zk_opts = vim.tbl_extend("force", {
        select = { "title", "absPath", "path", "metadata" }
    }, opts or {})


    require("zk").pick_notes(zk_opts, picker_opts, pick_cb or def_pick_cb(picker_opts))
end

function M.prompt_new(opts)
    local dir = opts.dir or "main"
    local title = vim.fn.input("Title: ")
    require("zk.commands").get("ZkNew")({ title = title, dir = dir })
end

function M.remove(opts)
    local fname = vim.fn.expand("%")
    local fpath = vim.fn.expand("%:p")
    local input = vim.fn.input("Are you sure you want to remove " .. fname, "y/n")
    if input == "y" then
        vim.cmd("!rm " .. fpath)
    end
end

function M.find_or_create_meeting(opts)
    local pick_customer_cb = function(note)
        local note_dir_path = vim.fs.dirname(note.absPath)
        local customer_dirname = vim.fs.basename(note_dir_path)
        local meetings_path = note_dir_path .. "/meetings/"
        local zk_meetings_dir = "confluent/" .. customer_dirname .. "/meetings"

        local create_meeting_cb = function(_, fzf_opts)
            local zk_new_opts = {
                dir = zk_meetings_dir,
                title = fzf_opts.__resume_data.last_query,
                template = "meetings.md",
                extra = {
                    customer_name = note.title,
                    customer_file = vim.fs.basename(note.absPath)
                }
            }
            local result = R("custom.utils").maybe_mkdir(meetings_path)
            if result then
                vim.notify("creating meeting")
                require("zk.commands").get("ZkNew")(zk_new_opts)
            end
        end
        opts = vim.tbl_extend("force", {
            hrefs = { zk_meetings_dir },
            tags = { "meeting" }
        }, opts or {})
        -- find or create the meeting
        M.find_or_create(opts, { title = "Zk Meetings" }, create_meeting_cb)
    end
    -- zk_pick(zkopts, { title = "Pick a customer", multi_select = false }, pick_cb)
    M.find_or_create_customer(opts, { title = "Pick a customer", multi_select = false }, pick_customer_cb)
end

function M.find_or_create_customer(opts, picker_opts, pick_cb)
    local create_cb = function(_, fzf_opts)
        local cust_name = fzf_opts.__resume_data.last_query
        local slug_name = require("custom.utils").slug(cust_name)

        local notebook_path = vim.fn.getcwd(0)
        -- if the cwd is not the notebook root, use the env variable as fallback
        if not require("zk.util").notebook_root(notebook_path) then
            notebook_path = vim.env.ZK_NOTEBOOK_DIR
        end

        local dir_name = "confluent/" .. slug_name
        local zkopts = {
            dir = dir_name,
            title = cust_name,
            template = "customer.md",
            edit = true
        }
        zkopts = vim.tbl_extend("force", zkopts, opts or {})

        local result = require("custom.utils").maybe_mkdir(notebook_path .. "/" .. dir_name)
        if result then
            require("zk.commands").get("ZkNew")(zkopts)
        end
    end

    picker_opts = vim.tbl_extend("force", {
        title = "Zk Customers",
    }, picker_opts or {})
    opts = vim.tbl_extend("force", {
        tags = { "customer" }
    }, opts or {})

    M.find_or_create(opts, picker_opts, create_cb, pick_cb)
end

function M.capture_today()
    local zk_cmd = 'zk new "$ZK_NOTEBOOK_DIR/log/daily" --notebook-dir "$ZK_NOTEBOOK_DIR" --no-input -p'
    vim.fn.system('zellij run -f -c -- nvim $(' ..
        zk_cmd .. ') -c "NoNeckPain" -c "norm Go## $(date +%H:%M)" -c "norm G2o" -c "norm zz" -c "startinsert"')
end



-- commands
vim.api.nvim_create_user_command("ZkCustomers", function(opts)
    M.find_or_create_customer(opts)
end, { desc = "Finds or creates a new customer note in Zk" })

vim.api.nvim_create_user_command("ZkMeetings", function(opts)
    M.find_or_create_meeting(opts)
end, { desc = "Creates a new meeting note for a  customer creating the customer if it does not exist in Zk" })

vim.api.nvim_create_user_command("ZkToday", function(_)
    require("zk.commands").get("ZkNew")({ dir = "log/daily" })
end, { desc = "Opens or creates Zk note for today" })


vim.api.nvim_create_user_command("ZkWeek", function(_)
    require("zk.commands").get("ZkNew")({ dir = "log/weekly" })
end, { desc = "Opens or creates Zk note for today" })

vim.api.nvim_create_user_command("ZkLog", function(_)
    require("zk.commands").get("ZkNotes")({ hrefs = { "log" }, sort = { "created" } })
end, { desc = "List all the Zk log notes" })

vim.api.nvim_create_user_command("ZkScreenshot", function(_)
    local out_dir = vim.env.ZK_NOTEBOOK_DIR .. "/assets"
    local title = vim.fn.input("Image title: ")
    require("custom.images").screencapture_markdown(title, out_dir)
end, { desc = "Launches screen capture and pasted image link into the current file" })

return M
