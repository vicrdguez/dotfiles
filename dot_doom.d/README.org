#+title: Doom Emacs Config
#+DATE:    April 23, 2023
#+SINCE:  1.0
#+STARTUP: content
#+PROPERTY: header-args :tangle config.el


* General
Basic variables to set:

#+begin_src elisp
(load-file "~/.doom.d/utils.el")
(setq user-full-name "Victor Rodriguez"
      user-mail-address "vrodriguez@confluent.io"
      ;; Makes sure that weekdays in the timestamps of org-mode files and the agenda appear in English
      system-time-locale "C")

(setq-default fill-column 120)
#+end_src

#+RESULTS: : 120

I want to add a visual vertical line showing the maximum column charachters I want to have set by ~fill-column~. To achieve we add a hook on ~prog-mode-hook~ which triggers when entering any programming mode to enable this functionlality.

#+begin_src elisp
(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
#+end_src

Adding a hook that auto-balances windows on any window change. This custom function excludes some common windows and popups that I don't want resized.

#+begin_src elisp
(add-hook 'window-configuration-change-hook #'vic/auto-balance-windows)
#+end_src


This hooks executes after saving any file, the function attached adds changes made to *just* to the doom config into [[https://www.chezmoi.io/][chezmoi]] tracking directory.

#+begin_src elisp
(add-hook 'after-save-hook #'vic/chezmoi-re-add-on-save)

#+end_src

With ~evil-respect-visual-line-mode~ vim ~j~ and ~k~ keys use visual lines, so we can move sanely through wrapped text. [[https://archive.baty.net/2020/respecting-visual-lines-in-doom-emacs/][Respecting visual lines in (Doom) emacs]]. Sadly it didn't worked so I had to set the variable in my [[file:init.el::setq evil-respect-visual-line-mode t][init.el]], I guess to avoid race conditions overriding it.

** Custom vars
I put some vars here that I need since the beginning of the config so there is no conflicts trying to set a variable with another that is not set yet

#+begin_src elisp
(setq vic/org-dir "~/dev/braindump-org/")
#+end_src

#+RESULTS:
: ~/dev/braindump-org/

** Package sources
Configuring package sources

#+begin_src elisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

** vterm
Use fish as the shell with ~vterm~

#+begin_src elisp
(setq vterm-shell "fish")
#+end_src

#+RESULTS:
: fish

** General bindings
I use =M-x= much more than =Eval=, so I want to swap their keybindings, since =<space>;= is easier to press

#+begin_src elisp
(map! :map 'override
      :leader
      :desc "M-x" ";" #'execute-extended-command
      :desc "Eval expression" ":" #'pp-eval-expression)
#+end_src

#+RESULTS:
: pp-eval-expression

* UI
** Line numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

#+RESULTS:
: relative

** Font
Doom exposes five (optional) variables for controlling fonts in Doom:
- ~doom-font~ -- the primary font to use
- ~doom-variable-pitch-font~ -- a non-monospace font (where applicable)
- ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for
  presentations or streaming.
- ~doom-unicode-font~ -- for unicode glyphs
- ~doom-serif-font~ -- for the ~fixed-pitch-serif~ face

 See 'C-h v doom-font' for documentation and more examples of what they
 accept. For example:
#+begin_src elisp
(setq doom-font (font-spec :family "Iosevka" :size 14)
      doom-variable-pitch-font (font-spec :family "Iosevka Etoile" :size 14)
      doom-unicode-font (font-spec :family "Symbols Nerd Font Mono" :size 14))
#+end_src

#+RESULTS:
: #<font-spec nil nil Symbols\ Nerd\ Font\ Mono nil nil nil nil nil 14 nil nil nil nil>

** Modeline
Add padding to the modeline so the display is not cut off the screen

#+begin_src elisp
(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes lsp checker input-method buffer-encoding major-mode process vcs "  "))) ; <-- added padding here
#+end_src

#+RESULTS:
: doom-modeline-format--main

** Theme
#+begin_src elisp
(setq doom-theme 'doom-gruvbox)
(setq! doom-gruvbox-dark-variant "hard")
;; (setq catppuccin-flavor 'mocha) ;; or 'latte, 'macchiato, or 'mocha
;; (load-theme 'catppuccin t t)
;; (catppuccin-reload)
#+end_src

#+RESULTS:

Configuring transparency to 95%

#+begin_src elisp
 (set-frame-parameter (selected-frame)'alpha '(95 . 95))
 (add-to-list 'default-frame-alist'(alpha . (95 . 95)))
#+end_src

#+RESULTS:
: ((alpha 95 . 95) (buffer-predicate . doom-buffer-frame-predicate) (right-divider-width . 1) (bottom-divider-width . 1) (vertical-scroll-bars) (tool-bar-lines . 0) (menu-bar-lines . 0) (left-fringe . 8) (right-fringe . 8))

** Org mode stylling
~org-modern-mode~ prettyfies org-mode a lot. I enable it globaly. The bullet star icons are modified by custom in [[file:custom.el::(custom-set-variables][custom.el]]

#+begin_src elisp
;; (after! org
;;   (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
;;   ;; (setq org-superstar-remove-leading-stars t
;;     (setq org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")
;;           org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(with-eval-after-load 'org (global-org-modern-mode))

#+end_src

#+RESULTS:

Change heading font size to make it bigger

#+begin_src elisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.2))))
  '(org-document-title ((t (:inherit document-title :height 1.4))))
)
#+end_src

#+RESULTS:

Increase plain list indent so they are easier to read

#+begin_src elisp
(setq org-list-indent-offset 2)
#+end_src

#+RESULTS:
: 2

Let's prettify the unordered lists, so hyphens are not just hyphens:

#+begin_src elisp
;; (setq! org-modern-list '(("+" . "◦")
;;                          ("-" . "◦")
;;                          ("*" . "•")))
(setq! org-modern-list '((43 . "◦")     ;; "+"
                         (45 . "◦")     ;; "-"
                         (42 . "•")))   ;; "*"
#+end_src

#+RESULTS:

Changing weight an color of org emphasis. *Bold* and =verbatim= in specific

#+begin_src elisp
;; (add-to-list 'org-emphasis-alist
;;              '("*" (:foreground "magenta" :weight extra-bold)))

(custom-set-faces
 `(org-verbatim ((t (:inherit 'italic :foreground ,(doom-color 'dark-yellow))))))

(setq org-emphasis-alist
      '(("*" (:foreground "#d3869b" :weight bold)) ;,(doom-color 'violet)
      ;; '(("*" (:foreground ,(doom-color 'violet) :weight bold))
        ;; ("*" bold)
         ("/" italic)
         ("_" underline)
         ("=" org-verbatim verbatim)
         ("~" org-code verbatim)
         ("+"
          (:strike-through t))))
             #+end_src

#+RESULTS:
| * | (:foreground #d3869b :weight bold) |          |
| _ | underline                          |          |
| = | org-verbatim                       | verbatim |
| ~ | org-code                           | verbatim |
| + | (:strike-through t)                |          |

* File browsing
** Dired
Make =h= and =l= go back and forward in dired. Much faster to navigate the directory structure! If using the =dired-open= package we should use ~dired-open-file~ as a binding for =l=, and use ~dired-find-file~ ortherwise.

#+begin_src elisp
(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  ;; (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (kbd "l") 'dired-find-file) ;
#+end_src

Adding icons to dired:

#+begin_src elisp
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
(add-hook 'dired-mode-hook (lambda ()
                             display-fill-column-indicator-mode nil))
#+end_src

#+RESULTS:
| (lambda nil display-fill-column-indicator-mode nil) | dired-extra-startup | all-the-icons-dired-mode | doom--recentf-add-dired-directory-h | +dired-disable-gnu-ls-flags-maybe-h | dired-omit-mode | diredfl-mode |

*** Sort directories first
For me is more confortable to have the directories listed before the files. This code solves that
#+begin_src elisp
(setq dired-listing-switches "--group-directories-first -al")
#+end_src

** Deft
This package config is simple, I just need to specify my org-directory (since I'll be using =deft= just for my org mode notes).

#+begin_src elisp
;; (use-package deft
;;   :init
;;   (setq deft-directory vic/org-dir)
;;   (setq deft-extensions '("org"))
;;   (setq deft-recursive t))
#+end_src

#+RESULTS:
: deft
* Completions
** Company
#+begin_src elisp
(use-package! company
  :config
  (setq company-tooltip-limit 10
        company-tooltip-minimum-width 30
        company-minimum-prefix-length 2
        company-box-doc-enable t
        company-box-scrollbar nil
        company-idle-delay 0.3))
#+end_src

#+RESULTS:
: t

** Vertico
At some point, you want to complete the =vertico= selection with the current input, but without selecting any of the candidates. This is a problem because the is alway a selected candidate. Thus if you input =hell= its is going to match and select say, =hello=, when you hit ~RET~. You can exit the completion with the input's content (~vertico-exit-input~) using the keybind ~M-RET~ however using ~M~ is not comfortable for me due to the custom layout of my keyboard.

For that reason I want to map ~vertico-exit-input~ to ~C-RET~ instead. The nasty surprise it that it won't work, apparently because ~C-RET~ won't behave as one may think. I need to bind it to ~C-<return>~  instead. This [[https://emacs.stackexchange.com/a/29776][answer on StackExchange]] gave me the solution.

#+begin_src elisp
(map! :after vertico
 :when (modulep! :editor evil +everywhere)
        :map vertico-map
        "C-<return>" #'vertico-exit-input)
#+end_src

#+RESULTS:

* Org mode
This config aims to make using org mode more pleasant for writing. The interesting bits are:
- ~org-link-frame-setup~ forces follow org links into a different window: [[file:~/.emacs.d/modules/lang/org/config.el::738][source]]
- ~visual-fill-column-center-text~ puts the text on the center so it is more readable using ~visual-fill-column-mode~


#+begin_src elisp
(setq org-directory vic/org-dir)

(after! org (setq org-pretty-entities t
                  org-hide-emphasis-markers t)
  (setf (alist-get 'file org-link-frame-setup) #'find-file-other-window)
  (setq split-height-threshold nil)
  (setq split-width-threshold 0)
  (setq org-indent-indentation-per-level 4)
  (setq org-export-with-toc nil)
  (setq org-link-make-description-function 'vic/get-url-title)
  ;; hooks
  ;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'org-appear-mode)
  (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
  ;; bindings
  (map! :map org-mode-map
        "C-k" #'org-previous-visible-heading
        "C-j" #'org-next-visible-heading))
#+end_src

#+RESULTS:

** Hooks
I want to use centered text mode for my org mode files but not for the =helpful= documentation. So I create my own hook that I attach to org mode but not to helpful. This Hook is farily simple, it just enables ~visual-fill-column-center-text~.

#+begin_src elisp :results none
(add-hook 'org-mode-hook (lambda ()
                           (setq visual-fill-column-center-text nil)
                           (setq visual-fill-column-enable-sensible-window-split t)
                           (setq visual-fill-column-width 120)))
#+end_src

In order to make =org-roam= links open always as a vertical split on the right, we need to configure ~display-buffer-alist~. We add a new configuration that matches all the =org-roam= buffers using a regular expression, and configures the function used to display the new buffer and a set of actions that creates the desired behavior.

We add the configuration to the list and include it in ~org-mode-hook~ so it is set when opening org mode files. The reason to not trying to match all org files is because that way, help pages (which are typically org files as well) also to be displayed as a vertical split.

#+begin_src elisp :results none
(add-hook 'org-mode-hook
          (lambda ()
            (add-to-list 'display-buffer-alist
                  ;; '(("\\`\\*Org\\(?:-mode\\| Agenda\\)\\*"
                  '(("\\`\\*Org-roam\\*\\*\\[[^]]+\\]\\*\\'"
                     (display-buffer-in-side-window)
                     (side . right)
                     (slot . -1)
                     (window-width . 0.33)
                     (preserve-size . (t . nil)))
                    ))))
#+end_src

I want also to auto pair tildes (~~~) for inline code. This should make the trick by using and enabling, but had to go hacky since I was not able to set just the tilde though. This [[https://stackoverflow.com/questions/69655134/emacs-electric-pair-mode-disable-specific-pairs][SO answer]] helped a lot.

#+begin_src elisp
(defvar vic/org-electric-pairs '((?~ . ?~)) "Electric pairs for org-mode.")

(defun org-add-electric-pairs ()
  (electric-pair-mode  1)
  (setq! electric-pair-pairs nil)
  (setq! electric-pair-text-pairs nil)
  (setq! electric-pair-pairs '((?~ . ?~)))
  (setq! electric-pair-text-pairs (delq '(?\< . ?\>) electric-pair-pairs))
  (setq-local electric-pair-inhibit-predicate
              `(lambda (c)
                 (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))
  )

(add-hook 'org-mode-hook 'org-add-electric-pairs)
#+end_src

#+RESULTS:
| er/add-org-mode-expansions | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (closure ((hook . org-mode-hook) (--dolist-tail--) t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | org-appear-mode | +lookup--init-org-mode-handlers-h | (closure ((hook . org-mode-hook) (--dolist-tail--) t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-fragtog-mode | org-add-electric-pairs | (lambda nil (add-to-list 'display-buffer-alist '((\`\*Org-roam\*\*\[[^]]+\]\*\' (display-buffer-in-side-window) (side . right) (slot . -1) (window-width . 0.33) (preserve-size t))))) | (lambda nil (setq visual-fill-column-center-text nil) (setq visual-fill-column-enable-sensible-window-split t) (setq visual-fill-column-width 170)) | doom-disable-show-paren-mode-h | doom-disable-show-trailing-whitespace-h | +org-make-last-point-visible-h | evil-org-mode | toc-org-enable | embrace-org-mode-hook | org-eldoc-load |

Enabling Latex inline preview:

#+begin_src elisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

#+RESULTS:

** Org appear
Org is not able to look show and hide emphasis markers dynamically (e.g. showing the markers just when the cursor is on a marked region like Obsidian). Using ~org-appear~ helps with this so it works as expected.

#+begin_src elisp
(use-package! org-appear
  :after org
  :init (setq org-appear-autolinks nil))
#+end_src

#+RESULTS:
: org-appear


#+RESULTS:

** Org roam
Package config and bindings

#+begin_src elisp
(use-package! org-roam
  :after org
  :init

  (map! :leader
        :prefix ("r" . "roam")
        ;; :desc "insert" "i" #'org-roam-insert
        :desc "Show graph" "g" #'org-roam-graph
        :desc "Find backlinks" "b" #'consult-org-roam-backlinks
        :desc "Search in Org Roam nodes" "s" #'consult-org-roam-search
        :desc "Org Roam Capture" "c" #'org-roam-capture
        :desc "Org Roam" "r" #'org-roam-buffer-toggle
        ;; :desc "Find node" "f" #'dendroam-node-find-initial-input
        :desc "Find node" "f" #'org-roam-node-find
        :desc "Insert node link" "i" #'org-roam-node-insert
        :desc "Insert (skipping capture)" "I" #'org-roam-insert-immediate
        :desc "Capture in today's daily" "t" #'org-roam-dailies-capture-today
        :desc "Take screenshot and insert at point" "," #'org-download-screenshot
        :desc "Insert clipboard image at point" "." #'org-download-clipboard
        (:prefix ("d" . "Open By date")
         :desc "Arbitrary date" "d" #'org-roam-dailies-find-date
         :desc "Tomorrow" "m" #'org-roam-dailies-find-tomorrow
         :desc "Today" "t" #'org-roam-dailies-find-today
         :desc "Yesterday" "y" #'org-roam-dailies-find-yesterday )
        ;; (:prefix ("j" . "Org Roam dailies capture")
        ;; :desc "Arbitrary date" "d" #'org-roam-dailies-capture-date
        ;; :desc "Tomorrow" "m" #'org-roam-dailies-capture-tomorrow
        ;; :desc "Today" "t" #'org-roam-dailies-capture-today
        ;; :desc "Yesterday" "y" #'org-roam-dailies-capture-yesterday )
        )
  (global-set-key (kbd "C-c i") #'org-roam-node-insert)
  ;; (define-key map (kbd "C-c i") 'org-roam-node-insert)
  (setq org-roam-directory vic/org-dir
        org-roam-completion-everywhere nil
        org-roam-node-display-template (format "%s %s ${doom-hierarchy-alias:*} ${backlinkscount}"
                                               (propertize "${doom-type:10}" 'face 'font-lock-keyword-face)
                                               (propertize "${doom-tags:20}" 'face 'org-tag))))
#+end_src

#+RESULTS:
: org-roam

I prefer to keep the =org-roam= buffer as a /sidebar/, it is a regular window though, so this configuration makes it not replace other windows and be smaller

#+begin_src elisp :results none
(after! org-roam
  (set-popup-rules!
    `((,(regexp-quote org-roam-buffer) ; persistent org-roam buffer
       :side right :width 0.20 :height 0.5 :ttl nil :modeline nil :quit nil :slot 1)
      ("^\\*org-roam: " ; node dedicated org-roam buffer
       :side right :width 0.20 :height 0.5 :ttl nil :modeline nil :quit nil :slot 2))))
#+end_src


*** Capture templates
#+begin_src elisp
(setq org-roam-capture-templates
      '(("m" "main" plain
         "%?"
         :if-new (file+head "main/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("r" "reference" plain "%?"
         :if-new
         (file+head "refs/${title}.org" "#+title: ${title}\n#+filetags: :reference:")
         :immediate-finish t
         :unnarrowed t)
        ;; ("s" "Meeting" plain "%?"
        ;;  ;; :target (file+olp "confluent/${customer-slug}/${customer-slug}.org" ("Meetings" "%<%Y-%m-%d-%H:%M> ${title}"))
        ;;  :target (file+olp vic/pick-customer-file ("Meetings" "%<%Y-%m-%d-%H:%M> ${title}"))
        ;;  ;; :target (file+olp "confluent/sample/sample.org" ("Meetings" "%<%Y-%m-%d-%H:%M> ${title}"))
        ;;  :unnarrowed t
        ;;  :clock-in t
        ;;  )
        ("s" "Customer meeting" plain "%?"
         :if-new (file+head+olp "confluent/${slug}/${slug}.org" "#+title: ${title}\n#+filetags: :customer:\n\n* Use Cases\n* Architecture\n" ("Meetings" "%<%Y-%m-%d-%H:%M> ${Meeting title}"))
         ;; :file-name "confluent/${slug}/${slug}"
         ;; :head "#+title: ${title}"
         :unnarrowed t
         :clock-in t
         )
        ("c" "Customer" plain "%?"
         :target (file+head "confluent/${slug}/${slug}.org" "#+title: ${title}\n#+filetags: :customer:\n\n* Use Cases\n* Architecture\n* Meetings\n")
         ;; :file-name "confluent/${slug}/${slug}"
         ;; :head "#+title: ${title}"
         :unnarrowed t
         :immediate-finish t
         )
        ("p" "Project" plain "%?"
         :if-new (file+head "projects/${slug}.org" "#+title: ${title}\n#+filetags: :project:\n\n")
         ;; :file-name "confluent/${slug}/${slug}"
         ;; :head "#+title: ${title}"
         :unnarrowed t
         :immediate-finish t
         )
        ("d" "draft" plain "%?"
         :if-new
         (file+head "drafts/${title}.org" "#+title: ${title}\n#+filetags: :draft:\n")
         :immediate-finish t
         :unnarrowed t)))
#+end_src

and for dailies

#+begin_src elisp
(setq org-roam-dailies-directory (concat vic/org-dir "log/daily"))
#+end_src

#+RESULTS:
: ~/dev/braindump-org/log/daily

*** Org roam Ui
This will set up the beatiful =org-roam=ui= package

#+begin_src elisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

*** Consult org roam
~consult-org-roam~ is handy to search your notes, specially to ripgrep your way out. However the preview is a bit intrusive for my taste, so I added a =0.8s= delay for some specific command, and enabled manual preview for ~org-roam-node-insert~ since very likely I won't need preview there.

#+begin_src elisp
(use-package! consult-org-roam
  :ensure t
  :after org-roam
  :init
  (require 'consult-org-roam)
  (consult-org-roam-mode 1)
  ;; previewed with delay
  (consult-customize
   consult-org-roam-search
   org-roam-node-find
   :preview-key '(:debounce 0.8 any))
  
  ;; Manual preview
  (consult-customize
   org-roam-node-insert
   :preview-key "C-SPC")

  :custom
  (consult-org-roam-grep-func #'consult-ripgrep))
#+end_src

#+RESULTS:
: consult-org-roam

** Org download

Org download will allow you to paste images and take screenshots into org files. Really handy tool. In macos I'm using ~screencapture~ as the capture tool. Another dependency to paste images is ~pngpaste~.

~org-image-actual-width~ makes images be displayed always at an acceptable width.

#+begin_src elisp
(use-package! org-download
  :ensure t
  :init
  (with-eval-after-load 'org
    (org-download-enable))
  :config
  (setq-default org-download-image-dir (concat vic/org-dir "_meta/assets/"))
  (setq org-download-screenshot-method "screencapture -i %s"
        org-download-heading-lvl nil
        org-download-method 'directory)
  (setq org-image-actual-width 720)
  :hook (dired-mode . org-download-enable))
#+end_src

#+RESULTS:
| org-download-enable | +dired-disable-gnu-ls-flags-maybe-h | doom--recentf-add-dired-directory-h | (lambda nil display-fill-column-indicator-mode nil) | all-the-icons-dired-mode | dired-omit-mode | diredfl-mode |

** Org Babel
Appart from evaluating =emacs-lisp= code blocks in org mode I also want to evaluate =bash= code block evaluation so we need to add ~shell~ to the =org-babel= loaded languages.

Refereces:
- https://orgmode.org/manual/Languages.html
- https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-shell.html

#+begin_src elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)))
#+end_src

* LSP
** bashls

#+begin_src elisp
(setq lsp-bash-highlight-parsing-errors t)
#+end_src

* Evil
Some remappings for evil:

#+begin_src elisp
(after! evil
  (map! (:map evil-window-map
         "v" #'+evil/window-vsplit-and-follow
         "s" #'+evil/window-split-and-follow)))
#+end_src

#+RESULTS:

* Doom package config doc
;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.




